{"ast":null,"code":"const createStoreImpl = createState => {\n  let state;\n  const listeners = /* @__PURE__ */new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(listener => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = listener => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    var _a;\n    if (((_a = import.meta.env) == null ? void 0 : _a.MODE) !== \"production\") {\n      console.warn(\"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\");\n    }\n    listeners.clear();\n  };\n  const api = {\n    setState,\n    getState,\n    subscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = createState => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = createState => {\n  var _a;\n  if (((_a = import.meta.env) == null ? void 0 : _a.MODE) !== \"production\") {\n    console.warn(\"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\");\n  }\n  return createStore(createState);\n};\nexport { createStore, vanilla as default };","map":{"version":3,"names":["createStoreImpl","createState","state","listeners","Set","setState","partial","replace","nextState","Object","is","previousState","assign","forEach","listener","getState","subscribe","add","delete","destroy","_a","import","meta","env","MODE","console","warn","clear","api","createStore","vanilla","default"],"sources":["/workspaces/coingecko-reactjs/node_modules/zustand/esm/vanilla.mjs"],"sourcesContent":["const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    var _a;\n    if (((_a = import.meta.env) == null ? void 0 : _a.MODE) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  var _a;\n  if (((_a = import.meta.env) == null ? void 0 : _a.MODE) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n"],"mappings":"AAAA,MAAMA,eAAe,GAAIC,WAAW,IAAK;EACvC,IAAIC,KAAK;EACT,MAAMC,SAAS,GAAG,eAAgB,IAAIC,GAAG,EAAE;EAC3C,MAAMC,QAAQ,GAAG,CAACC,OAAO,EAAEC,OAAO,KAAK;IACrC,MAAMC,SAAS,GAAG,OAAOF,OAAO,KAAK,UAAU,GAAGA,OAAO,CAACJ,KAAK,CAAC,GAAGI,OAAO;IAC1E,IAAI,CAACG,MAAM,CAACC,EAAE,CAACF,SAAS,EAAEN,KAAK,CAAC,EAAE;MAChC,MAAMS,aAAa,GAAGT,KAAK;MAC3BA,KAAK,GAAG,CAACK,OAAO,IAAI,IAAI,GAAGA,OAAO,GAAG,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,GAAGC,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,EAAEV,KAAK,EAAEM,SAAS,CAAC;MACrHL,SAAS,CAACU,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACZ,KAAK,EAAES,aAAa,CAAC,CAAC;IACjE;EACF,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMb,KAAK;EAC5B,MAAMc,SAAS,GAAIF,QAAQ,IAAK;IAC9BX,SAAS,CAACc,GAAG,CAACH,QAAQ,CAAC;IACvB,OAAO,MAAMX,SAAS,CAACe,MAAM,CAACJ,QAAQ,CAAC;EACzC,CAAC;EACD,MAAMK,OAAO,GAAG,MAAM;IACpB,IAAIC,EAAE;IACN,IAAI,CAAC,CAACA,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGH,EAAE,CAACI,IAAI,MAAM,YAAY,EAAE;MACxEC,OAAO,CAACC,IAAI,CACV,wMAAwM,CACzM;IACH;IACAvB,SAAS,CAACwB,KAAK,EAAE;EACnB,CAAC;EACD,MAAMC,GAAG,GAAG;IAAEvB,QAAQ;IAAEU,QAAQ;IAAEC,SAAS;IAAEG;EAAQ,CAAC;EACtDjB,KAAK,GAAGD,WAAW,CAACI,QAAQ,EAAEU,QAAQ,EAAEa,GAAG,CAAC;EAC5C,OAAOA,GAAG;AACZ,CAAC;AACD,MAAMC,WAAW,GAAI5B,WAAW,IAAKA,WAAW,GAAGD,eAAe,CAACC,WAAW,CAAC,GAAGD,eAAe;AACjG,IAAI8B,OAAO,GAAI7B,WAAW,IAAK;EAC7B,IAAImB,EAAE;EACN,IAAI,CAAC,CAACA,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGH,EAAE,CAACI,IAAI,MAAM,YAAY,EAAE;IACxEC,OAAO,CAACC,IAAI,CACV,uGAAuG,CACxG;EACH;EACA,OAAOG,WAAW,CAAC5B,WAAW,CAAC;AACjC,CAAC;AAED,SAAS4B,WAAW,EAAEC,OAAO,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}